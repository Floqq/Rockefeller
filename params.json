{"name":"Rockefeller","tagline":"Library for dealing with money and currency conversion in Python","body":"Rockefeller\r\n===========\r\n\r\nLibrary for dealing with money and currency conversion in Python. It provides\r\ntools for __storing__ currencies and exchange rates, __converting__ from one\r\ncurrency to another and __fetching__ exchange rates from different services.\r\n\r\n![http://floqq.github.com/Rockefeller/](http://floqq.github.com/Rockefeller/)\r\n\r\n\r\nWorking with currencies\r\n-----------------------\r\n\r\nCurrencies are represented by the ``Currency`` class.\r\n\r\n``` python\r\nimport rockefeller\r\n\r\nusd = rockefeller.Currency(name='United States Dollar', code='USD',\r\n                            numeric='840', symbol='$', exponent=2)\r\nstr(usd)\r\n# => 'USD'\r\n```\r\n\r\n\r\nIf you want to globally store a currency in your program, you first need to\r\n__support it__.\r\n\r\n``` python\r\nimport rockefeller\r\n\r\nusd = rockefeller.Currency(name='United States Dollar', code='USD',\r\n                            numeric='840', symbol='$', exponent=2)\r\n\r\n# You only have access to the currency stored in ``usd`` variable\r\nrockefeller.Currency.USD\r\n# => None\r\n\r\n# Globally support the currency (See `setting currency store`)\r\nusd.support()\r\n\r\n# Now you can access it directly via the ``Currency`` class\r\nrockefeller.Currency.USD\r\n# => Currency(code='USD', ...)\r\nrockefeller.Currency.get('USD')\r\n# => Currency(code='USD', ...)\r\n\r\nusd == rockefeller.Currency.USD\r\n# => True\r\n\r\nusd is rockefeller.Currency.USD\r\n# => False\r\n```\r\n\r\n**Note** that there's no currency preloaded or stored by default, is up to you\r\nto __store__ the currencies your application is going to support before working\r\nwith them.\r\n\r\nThe default ``store`` used by the ``Currency`` class is ``MemoryCurrency``\r\nwhich stores the supported currency just in memory. If you need to store them\r\nin other place see the section **Currency Store**.\r\n\r\n\r\nExchange rates\r\n--------------\r\n\r\nExchange rates between currencies are represented through the ``ExchangeRate``\r\nclass but you can __add__ and __retrieve__ exchange rates directly like this:\r\n\r\n``` python\r\nimport rockefeller\r\n\r\neur = rockefeller.Currency(name='Euro', code='EUR', numeric='978',\r\n                            symbol=u'â‚¬', exponent=2)\r\nclp = rockefeller.Currency(name='Chilean Peso', code='CLP', numeric='152',\r\n                            symbol='$', exponent=0)\r\n\r\nrockefeller.get_exchange_rate(eur, clp)\r\n# => None\r\n\r\n# Store exchange rate for EUR => CLP\r\nrockefeller.add_exchange_rate(eur, clp, 604.10)\r\n\r\nrockefeller.get_exchange_rate(eur, clp)\r\n# => Decimal('604.10')\r\n\r\n# You can also get the inverse even if not explicitly defined\r\nrockefeller.get_exchange_rate(clp, eur)\r\n# => Decimal('0.001655355073663300778016884622')\r\n\r\nrate == 604.10\r\n# => False (604.10 doesn't have an exact float representation)\r\n\r\nfloat(rate) == 604.10\r\n# => True\r\n```\r\n\r\n**Note** The default ``store`` used by the ``ExchangeRate`` class is\r\n``MemoryExchangeRates`` which stores the rates just in memory. If you need to\r\nstore them in other place see the section **Exchange Rates Store**.\r\n\r\nMoney\r\n-----\r\n\r\nFor working with currencies and amounts of it there's the convenient ``Money``\r\nclass.\r\n\r\n``` python\r\n\r\nmoney = rockefeller.Money(amount=100.235, currency=rockefeller.Currency.USD)\r\n```\r\n\r\nMoney arithmetic\r\n----------------\r\n\r\n### Sum\r\n\r\n``` python\r\n(rockefeller.Money(100, rockefeller.Currency.USD) + \r\n    rockefeller.Money(100, rockefeller.Currency.USD))\r\n# => Money(200, rockefeller.Currency.USD)\r\n```\r\n\r\n### Subtraction\r\n\r\n``` python\r\n(rockefeller.Money(80, rockefeller.Currency.USD) - \r\n    rockefeller.Money(100, rockefeller.Currency.USD))\r\n# => Money(-20, rockefeller.Currency.USD)\r\n```\r\n\r\n### Subtraction (saturating)\r\n\r\n``` python\r\nrockefeller.Money(80, rockefeller.Currency.USD).remove(\r\n    rockefeller.Money(100, rockefeller.Currency.USD))\r\n# => Money(0, rockefeller.Currency.USD)\r\n```\r\n\r\n### Multiplication\r\n\r\n``` python\r\n(rockefeller.Money(10, rockefeller.Currency.USD) * \r\n    rockefeller.Money(10, rockefeller.Currency.USD))\r\n# => Money(100, rockefeller.Currency.USD)\r\n```\r\n\r\n### Division\r\n\r\n``` python\r\n(rockefeller.Money(100, rockefeller.Currency.USD) / \r\n    rockefeller.Money(100, rockefeller.Currency.USD))\r\n# => Money(1, rockefeller.Currency.USD)\r\n```\r\n\r\n### Float rounding using currency's exponent\r\n\r\n``` python\r\nusd_money = rockefeller.Money(amount=100.235, currency=rockefeller.Currency.USD)\r\nclp_money = rockefeller.Money(amount=60551.984324, currency=rockefeller.Currency.CLP)\r\n\r\nusd_money.amount\r\n# => Decimal('100.235')\r\n\r\nclp_money.amount\r\n# => Decimal('60551.984324')\r\n\r\nfloat(usd_money)\r\n# => 100.24\r\n\r\nfloat(clp_money)\r\n# = > 60552\r\n```\r\n\r\n### String representation\r\n\r\n``` python\r\nu'$100.24' == unicode(usd_money)\r\n# => True\r\n```\r\n\r\n### Equality\r\n\r\n``` python\r\nusd_money == rockefeller.Money(amount=100.235, currency=rockefeller.Currency.USD)\r\n# => True\r\n```\r\n\r\n### Conversion between currencies\r\n\r\n``` python\r\nimport rockefeller\r\n\r\nusd = rockefeller.Money(amount=100, currency=rockefeller.Currency.USD)\r\neur = rockefeller.Money(amount=78, currency=rockefeller.Currency.EUR)\r\n\r\nrockefeller.add_exchange_rate(usd, eur, .78)\r\n\r\nusd.exchange_to(rockefeller.Currency.EUR)\r\n# => Money(78, rockefeller.Currency.EUR)\r\n\r\neur.exchange_to(rockefeller.Currency.USD)\r\n# => Money(100, rockefeller.Currency.USD)\r\n```\r\n\r\n### Conversion between currencies using indirection\r\n\r\nIs common that third-party exchange-rate services gives you the rates of each\r\ncurrency relative to a common one.\r\nTake for example, [openexchangerates.org](https://openexchangerates.org) that\r\nreturns all rates relative to __USD Dollars__.\r\n\r\n``` javascript\r\n/* latest.json (7 mins ago) */\r\n{\r\n    \"timestamp\": 1364680868,\r\n    \"base\": \"USD\",\r\n    \"rates\": {\r\n        \"AED\": 3.6729,\r\n        \"AFN\": 53.0133,\r\n        \"ALL\": 109.122501,\r\n        \"AMD\": 421.240004,\r\n        /* 164 currencies */\r\n        \"YER\": 214.800258,\r\n        \"ZAR\": 9.233264,\r\n        \"ZMK\": 5227.108333,\r\n        \"ZMW\": 5.3855,\r\n        \"ZWL\": 322.322775\r\n    }\r\n}\r\n```\r\n\r\nThis is how the ``Money`` class works when you try to convert __currency 1__ into\r\n__currency 2__:\r\n\r\n1. get_exchange_rate(currency1, currency2)\r\n2. if not found try the inverse: get_exchange_rate(currency2, currency1)\r\n3. if not found, try using the __indirection currency__\r\n\r\nThe __indirection currency__ is a currency you set as the common/base currency\r\nto which the rest of the currency rates are related.\r\n\r\nSo, let's say we have the following:\r\n\r\n``` python\r\nrockefeller.add_exchange_rate(usd, eur, .78)\r\nrockefeller.add_exchange_rate(usd, clp, 472.03735)\r\n```\r\n\r\nAnd you want to get the exchange rate from __eur__ to __clp__:\r\n\r\n``` python\r\nrockefeller.Money(40, eur).exchange_to(clp)\r\n# => None\r\n```\r\n\r\nIt will be ``None`` since there's no direct relation between __eur -> clp__ or\r\n__clp -> eur__. Of course, this behavior is not desired because storing all the\r\nrates between currencies will require 33,856 associations (taking into account\r\nthat there's 184 different currencies).\r\n\r\nThe workaround to this problem is setting the __indirection currency__ like\r\nthis:\r\n\r\n``` python\r\nrockefeller.Money.indirection_currency = rockefeller.Currency.USD\r\n```\r\n\r\nWith that in place, any time an exchange rate can't be found, the indirection\r\ncurrency will be checked, and if set, then this:\r\n\r\n``` python\r\nrockefeller.Money(40, eur).exchange_to(clp)\r\n# => None\r\n```\r\n\r\nwill be treated internally as this:\r\n\r\n``` python\r\nrockefeller.Money(40, eur).exchange_to(usd).exchange_to(clp)\r\n# => Decimal('24177.16', rockefeller.Currency.CLP)\r\n```\r\n\r\nIf you don't want to set a currency as the global indirection currency you can\r\nuse a temporarily one like this:\r\n\r\n``` python\r\nrockefeller.Money(40, eur).exchange_to(usd, indirection_currency=rockefeller.Currency.USD).exchange_to(clp)\r\n# => Decimal('24177.16', rockefeller.Currency.CLP)\r\n```\r\n\r\n**NOTICE**\r\nTake into account that the __indirection currency__ is just a workaround used\r\nby the ``Money`` class to convert money from one currency into another, if you\r\ntry to get the exchange rate between two unrelated currencies using\r\n``get_exchange_rate()`` you will still get ``None``.\r\n\r\nCurrency Store\r\n--------------\r\n\r\nBy default all supported currencies are stored in memory, so if your program\r\nfinishes or you need the information of those currencies in another place not\r\nnecessarily written in Python then you need a custom solution. But don't panic!\r\nyou can instruct rockefeller to use the class you want to store the currencies,\r\nin order to do so you just need to create a class that implements the following\r\ninterface:\r\n\r\n``` python\r\nclass MyCurrencyStore:\r\n    def support(self, currency):\r\n        \"\"\"Store a currency.\r\n\r\n        :param currency: :class:`rockefeller.currency.Currency` instance.\r\n        \"\"\"\r\n        # you must implement this...\r\n\r\n    def get(self, code):\r\n        \"\"\"Get a currency by its code.\r\n\r\n        :param code: ISO 4217 currency code.\r\n\r\n        :return: :class:`rockefeller.currency.Currency` instance.\r\n        \"\"\"\r\n        # you must implement this...\r\n```\r\n\r\nWith that in place, you just have to tell rockefeller to globally start using\r\nthat store like this:\r\n\r\n``` python\r\nrockefeller.set_currency_store(MyCurrencyStore())\r\n```\r\n\r\nOr to locally use that store like this:\r\n\r\n``` python\r\neur = rockefeller.Currency(name='Euro', code='EUR', numeric='978',\r\n                           symbol=u'â‚¬', exponent=2)\r\nmy_store = MyCurrencyStore()\r\neur.support(store=my_store)\r\n```\r\n\r\nExchange Rates Store\r\n--------------------\r\n\r\nBy default every exchange rate you add between currencies is stored in memory,\r\nso if your program stops or you need the information of those rates in another\r\nplace not necessarily written in Python then you need a custom solution.\r\nThe way you instruct rockefeller to use the class you want to store the\r\nexchange rates is by creating a class that implements the following interface:\r\n\r\n``` python\r\nclass MyExchangeRateStore:\r\n    def add_exchange_rate(self, base_currency, currency, exchange_rate):\r\n        \"\"\"Store exchange rate of a one currency relatively to another one.\r\n\r\n        :param base_currency: Currency used as the base.\r\n            :class:`~rockefeller.currency.Currency` instance.\r\n        :param currency: Currency you want to know its exchange rate in relation\r\n            to ``base_currency.`` :class:`~rockefeller.currency.Currency` instance.\r\n        :param exchange_rate: Exchange rate as a string. :class:`str` instance.\r\n        \"\"\"\r\n        # you must implement this...\r\n\r\n    def get_exchange_rate(self, base_currency, currency):\r\n        \"\"\"Get exchange rate of a currency relatively to another one.\r\n\r\n        :param base_currency: Currency used as the base.\r\n            :class:`~rockefeller.currency.Currency` instance.\r\n        :param currency: Currency you want to know its exchange rate in relation\r\n            to ``base_currency.`` :class:`~rockefeller.currency.Currency` instance.\r\n\r\n        :return: Exchange rate as a string. :class:`str` instance.\r\n        \"\"\"\r\n        # you must implement this...\r\n```\r\n\r\nWith that in place, you just have to tell rockefeller to start using that store\r\nlike this:\r\n\r\n``` python\r\nrockefeller.set_exchange_rates_store(MyExchangeRateStore())\r\n```\r\n\r\nContrib Stores\r\n--------------\r\n\r\nSince this library came out from a Google App Engine(GAE) project we shipped a\r\n``Currency`` and ``ExchangeRates`` stores. Each of these stores are going to\r\nsave the data in the datastore using the ``ndb`` models\r\n``rockefeller.gae.models.Currency`` and ``rockefeller.gae.models.ExchangeRate``.\r\n\r\nUse this to plug the GAE currencies store:\r\n\r\n``` python\r\nrockefeller.set_currency_store(\r\n            rockefeller.gae.currency.GAECurrency(model=rockefeller.gae.models.Currency))\r\n```\r\n\r\nYou can tell that you can even use your own GAE model, just make sure that it\r\nhas the ``get(code)`` and ``support(currency)`` class methods.\r\n\r\nUse this to plug the GAE exchange rates store:\r\n\r\n``` python\r\nrockefeller.set_exchange_rates_store(\r\n            rockefeller.gae.exchange_rates.GAEExchangeRates(model=rockefeller.gae.models.ExchangeRate))\r\n```\r\n\r\nYou can tell that you can even use your own GAE model, just make sure that it\r\nhas the ``add_exchange_rate(base_currency, currency, exchange_rate)`` and\r\n``get_exchange_rate(base_currency, currency)`` class methods.\r\n\r\nReal World Example\r\n------------------\r\n\r\nThis is real-world example of how we use this library. In our project, we have\r\na ``money.py`` file that takes care of configuring the lib and initializing the\r\nsupported currencies.\r\n\r\n``` python\r\nfrom django.conf import settings\r\n\r\nimport rockefeller\r\nimport rockefeller.gae.models\r\nimport rockefeller.gae.currency\r\nimport rockefeller.gae.exchange_rates\r\n\r\nrockefeller.set_currency_store(\r\n        rockefeller.gae.currency.GAECurrency(rockefeller.gae.models.Currency))\r\n\r\nrockefeller.set_exchange_rates_store(\r\n        rockefeller.gae.exchange_rates.GAEExchangeRates(rockefeller.gae.models.ExchangeRate))\r\n\r\nfor code, currency in settings.SUPPORTED_CURRENCIES.iteritems():\r\n    rockefeller.Currency(**currency).support()\r\n\r\nrockefeller.Money.indirection_currency = rockefeller.Currency.USD\r\n```\r\n\r\nInstallation\r\n------------\r\n\r\nThe library has 0 dependencies outside of the standard library. In order to\r\ninstall it just download the source and run:\r\n\r\n    python setup.py install\r\n\r\nOr you can install it directly from git using pip:\r\n\r\n    pip install -e git+http://github.com/Floqq/Rockefeller.git#egg=Rockefeller\r\n\r\nRunning tests\r\n-------------\r\n\r\n    python setup.py test\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}